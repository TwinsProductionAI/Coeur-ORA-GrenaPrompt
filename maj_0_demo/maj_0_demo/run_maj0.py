#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
MAJ_0 ‚Äî D√©mo brief client ‚Üí C≈ìur ORA
Charge un brief JSON, construit un prompt et ex√©cute ORACore.cycle().
LOCK ‚Üí REM ‚Üí AUTOPROMPT ‚Üí AUDIT (selon config du c≈ìur).

Usage:
  python maj_0_demo/run_maj0.py
Options:
  --brief maj_0_demo/brief_demo.json
  --iterations 2
  --no-audit
"""

from __future__ import annotations
import json
import argparse
from pathlib import Path
from typing import Any, Dict

try:
    from ora_core import ORACore  # import du c≈ìur ORA
except Exception as e:
    raise SystemExit(
        "‚ùå Impossible d'importer ORACore.\n"
        "Installe d'abord le projet :\n"
        "  pip install -e .\n"
        f"D√©tail: {e}"
    )

ROOT = Path(__file__).resolve().parent
DEFAULT_BRIEF = ROOT / "brief_demo.json"

def load_json(path: Path) -> Dict[str, Any]:
    if not path.exists():
        raise SystemExit(f"‚ùå Fichier introuvable: {path}")
    try:
        return json.loads(path.read_text(encoding="utf-8"))
    except Exception as e:
        raise SystemExit(f"‚ùå JSON invalide ({path}): {e}")

def build_prompt_from_brief(brief: Dict[str, Any]) -> str:
    ident = brief.get("identite", {})
    aud = brief.get("audience", {})
    voix = brief.get("voix", {})
    use_cases = brief.get("use_cases", [])
    sources = brief.get("sources", [])
    contraintes = brief.get("contraintes", {})
    kpi = brief.get("kpi", [])

    src_txt = "\n".join([f"- {s.get('type')}: {s.get('value')}" for s in sources]) or "- (aucune fournie)"
    uc_txt = "\n".join([f"- {u}" for u in use_cases]) or "- (√† pr√©ciser)"
    kpi_txt = ", ".join(kpi) or "(√† d√©finir)"
    afaire = ", ".join(voix.get("a_faire", []))
    aeviter = ", ".join(voix.get("a_eviter", []))

    prompt = f"""
Tu es un architecte IA pragmatique. Tu dois proposer un **plan d'activation ORA** coh√©rent
√† partir d'un brief client. Ta sortie doit √™tre structur√©e.

=== IDENTIT√â ===
Entreprise: {ident.get('entreprise')}
Secteur: {ident.get('secteur')}
Mission: {ident.get('mission')}
Langues: {", ".join(ident.get("langues", []))}

=== AUDIENCE ===
Persona principal (r√¥le/objectifs/douleurs): {aud.get('persona_principal')}
Canaux: {", ".join(aud.get("canaux", []))}

=== VOIX & STYLE ===
Ton: {voix.get('ton')}
√Ä faire: {afaire}
√Ä √©viter: {aeviter}
Langue de r√©ponse: {voix.get('langue_reponse')}

=== CAS D'USAGE PRIORITAIRES ===
{uc_txt}

=== SOURCES DISPONIBLES ===
{src_txt}

=== CONTRAINTES / COMPLIANCE ===
L√©gal: {contraintes.get('legal')}
Garde-fous: {", ".join(contraintes.get("garde_fous", []))}

=== KPI CIBL√âS ===
{kpi_txt}

# OBJECTIF DE SORTIE
1) Synth√®se du contexte (5 lignes max).
2) R√®gles **LOCK** propos√©es (3 √† 5 r√®gles claires).
3) Seeds de **REM** (m√©moire persistante √† initialiser).
4) Boucle **AUTOPROMPT** ‚Äî 3 t√¢ches initiales concr√®tes.
5) **AUDIT** ‚Äî quels √©v√©nements logger et pourquoi.
6) Mesure des KPI (comment, fr√©quence, seuils).
R√©ponds en fran√ßais, sous forme de plan op√©rationnel.
""".strip()
    return prompt

def main():
    p = argparse.ArgumentParser(description="MAJ_0 ‚Äî brief client ‚Üí plan ORA")
    p.add_argument("--brief", default=str(DEFAULT_BRIEF), help="Chemin du brief JSON")
    p.add_argument("--iterations", type=int, default=1, help="It√©rations AUTOPROMPT (d√©faut: 1)")
    p.add_argument("--no-audit", action="store_true", help="D√©sactiver les logs d'audit")
    args = p.parse_args()

    brief = load_json(Path(args.brief))
    prompt = build_prompt_from_brief(brief)

    core = ORACore(admin_only=False, iterations=args.iterations, audit=not args.no_audit)

    print("üöÄ MAJ_0 ‚Äî Brief client inject√© dans le C≈ìur ORA")
    print("    (LOCK ‚Üí REM ‚Üí AUTOPROMPT ‚Üí AUDIT)")
    print("-------------------------------------------------\n")
    result = core.cycle(prompt)
    print(result.strip())
    print("\n‚úÖ Termin√©.")

if __name__ == "__main__":
    main()
